The Data Set

This particular dataset was taken from the Udacity forums the first months after 
the launch of this Hadoop course.

The basic structure is - the forum has nodes. All nodes have a body and author_id. 
Top level nodes are called questions, and will also have a title and tags. Questions 
can have answers. Both questions and answers can have comments. 

There are 2 files in the dataset. The first is "forum_nodes.tsv", and that contains 
all forum questions and answers in one table. It was exported from the RDBMS by using 
tab as a separator, and enclosing all fields in doublequotes. 
You can find the field names in the first line of the file "forum_node.tsv". 
The ones that are the most relevant to the task are:

"id": id of the node
"title": title of the node. in case "node_type" is "answer" or "comment", this field 
will be empty
"tagnames": space separated list of tags
"author_id": id of the author
"body": content of the post
"node_type": type of the node, either "question", "answer" or "comment"
"parent_id": node under which the post is located, will be empty for "questions"
"abs_parent_id": top node where the post is located
"added_at": date added

The second table is "forum_users.tsv". It contains fields for "user_ptr_id" - the 
id of the user. "reputation" - the reputation, or karma of the user, earned when 
other users upvote their posts,and the number of "gold", "silver" and "bronze" badges earned. 
The actual database has more fields in this table, like user name nickname, 
bio (if set) etc, but we have removed this information here.

####### Task One: Students and Posting Time on Forums
Find for each student what is the hour during which the student has posted the most posts. 
Output from reducers should be:
author_id    hour
For example:
13431511\t13
54525254141\t21
If there is a tie: there are multiple hours during which a student has posted a maximum 
number of posts, print the student-hour pairs on separate lines. The order in which these 
lines appear in your output does not matter.

You can ignore the time-zone offset for all times - for example in the following line: 
"2012-02-25 08:11:01.623548+00" - you can ignore the +00 offset.

In order to find the hour posted, use the date_added field and NOT the last_activity_at field.

# test mapreduce code with test data set.
$ cat student_test_posts.csv | python mapper1.py | sort | python reducer1.py

####### Task Two: Post and Answer Length
Find if there is a correlation between the length of a post and the length of answers.

Write a mapreduce program that would process the forum_node data and output the length 
of the post and the average answer (just answer, not comment) length for each post. 

Hints for writing reducer code
Code should not use a data structure (e.g. a dictionary) in the reducer that stores 
a large number of keys. Remember that Hadoop already sorts the mapper output based 
on key, such that key-value pairs with the same key will appear consecutively as input 
to the reducer. Make sure you take advantage of this ordering when you write your reducer code.

This is part of a more general principle connected with the Volume characteristic of Big Data. 
Mappers and reducers read through very large amounts of data and we should be mindful, as we 
write mapper and reducer code, of how much data we store in main memory.

# test mapreduce code with test data set
$ cat student_test_posts.csv | python mapper2.py | sort | python reducer2.py

####### Task Three: Top Tags
Write a mapreduce program that would output Top 10 tags, ordered by the number of questions 
they appear in.
For an extra challenge you can think about how to get a top 10 list of tags, where they are 
ordered by some weighted score of your choice. 
Please note that you should only look at tags appearing in questions themselves (i.e. nodes 
with node_type "question"), not on answers or comments.

# test mapreduce code with test data set
$ cat student_test_posts.csv | python mapper3.py | sort | python reducer3.py

####### Task Four: Study Groups
We might want to help students form study groups. But first we want to see if there are 
already students on forums that communicate a lot between themselves.

Write a mapreduce program that for each forum thread (that is a question node with all 
it's answers and comments). This would give us a list of students that have posted there - 
either asked the question, answered a question or added a comment. If a student posted to 
that thread several times, they should be added to that list several times as well, to 
indicate intensity of communication.
# test mapreduce code with test data set
$ cat student_test_posts.csv | python mapper4.py | sort | python reducer4.py

test results
https://www.udacity.com/wiki/ud617/local-testing-instructions
